'comment': 'TODO: target local variables and parameter names; fix daml embedded in html tags'
'fileTypes': [
  'text','daml'
]
'foldingStartMarker': '(?x)       # turn on extended mode\n      {begin\\s.*?}    # begin tag\n      |[{][^}]*$    # opening of a command and non-closing characters (TODO: make these count)\n      |[(][^)]*$    # opening of a list and non-closing characters (TODO: make these count)\n    '
'foldingStopMarker': '(?x)       # turn on extended mode\n      {end\\s.*?}    # end tag\n      |^\\s*[^{]*[}]    # non-starting characters (TODO: make these count) and ending of a command \n      |^\\s*[^(]*[)]    # non-starting characters (TODO: make these count) and ending of a list\n    '
'name': 'DAML'
'patterns': [
  {
    'include': '#chunk'
  }
  {
    'include': 'text.html.basic'
  }
]
'repository':
  'atvar':
    'match': '(?<=[({| ])@[\\w.#-]+'
    'name': 'variable.static.daml'
  'blockvar':
    'match': '(?<=[({| ])\\$[\\w.-]+'
    'name': 'variable.block.daml'
  'chunk':
    'begin': '\\{'
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.chunk.begin.daml'
    'comment': 'a DAML chunk'
    'end': '\\}'
    'endCaptures':
      '0':
        'name': 'punctuation.definition.chunk.end.daml'
    'name': 'meta.structure.chunk.daml'
    'patterns': [
      {
        'include': '#chunk'
      }
      {
        'include': '#comment'
      }
      {
        'include': '#command'
      }
      {
        'include': '#param'
      }
    ]
  'colonstring':
    'match': '(?<=[({| ]):[\\w.#-]+'
    'name': 'string.quoted.other.daml'
  'command':
    'name': 'meta.command.daml'
    'patterns': [
      {
        'captures':
          '1':
            'name': 'keyword.begin.daml'
          '2':
            'name': 'string.other.begin.daml'
        'comment': 'begin block'
        'match': '(?x)\n            (?<=\\{)\n            (begin)\n            \\s+\n            (\\w+)\n          '
      }
      {
        'captures':
          '1':
            'name': 'keyword.end.daml'
          '2':
            'name': 'string.other.end.daml'
        'comment': 'end block'
        'match': '(?x)\n            (?<=\\{)\n            (end)\n            \\s+\n            (\\w+)\n          '
      }
      {
        'captures':
          '1':
            'name': 'support.function.daml'
        'match': '(?x)\n            (?<=\\{|\\|)\n            \\s*\n            (merge|foreach|sub|if|ifelse|then|else|and|or|not|less|whoami|su|>|>>|\\*)\n            \\b\n          '
        'name': 'support.constant.shortcut'
      }
      {
        'captures':
          '1':
            'name': 'support.class.daml'
          '2':
            'name': 'support.function.daml'
        'comment': 'classic {handler method} style'
        'match': '(?x)\n            (?<=\\{|\\|)\n            \\s*\n            (\\w+)\n            \\s+\n            (\\w+)\n          '
      }
    ]
  'comment':
    'begin': '(?<={)/'
    'comment': 'This is a comment about comments'
    'end': '(?=})'
    'name': 'comment.line.daml'
    'patterns': [
      {
        'include': '#chunk'
      }
    ]
  'contentitem':
    'match': '(?<=[{| ])%[\\w.:/-]+'
    'name': 'variable.contentitem.daml'
  'doublestring':
    'begin': '"'
    'comment': 'begin = \'(?<![}])"(?![{}])\';end = \'(?<![{}])"(?![{])\';'
    'end': '"'
    'name': 'string.quoted.double.daml'
    'patterns': [
      {
        'include': '#chunk'
      }
    ]
  'list':
    'begin': '\\('
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.list.begin.daml'
    'end': '\\)'
    'endCaptures':
      '0':
        'name': 'punctuation.definition.list.end.daml'
    'name': 'meta.list.daml'
    'patterns': [
      {
        'include': '#param'
      }
    ]
  'localvar':
    'match': '(?<=[({| ])[\\w.#-]+'
    'name': 'variable.local.daml'
  'number':
    'match': '(?<=[({| ])\\d+(?=[ )}|])'
    'name': 'constant.numeric.daml'
  'param':
    'name': 'meta.param.daml'
    'patterns': [
      {
        'include': '#list'
      }
      {
        'include': '#string'
      }
      {
        'include': '#chunk'
      }
      {
        'include': '#number'
      }
      {
        'include': '#contentitem'
      }
      {
        'include': '#variable'
      }
    ]
  'pipevar':
    'match': '(?<=[({| ])__pipe\\.[\\w.#-]+'
    'name': 'variable.pipe.daml'
  'remotevar':
    'match': '(?<=[({| ])#[\\w.#-]+'
    'name': 'variable.remote.daml'
  'string':
    'patterns': [
      {
        'include': '#colonstring'
      }
      {
        'include': '#doublestring'
      }
    ]
  'variable':
    'patterns': [
      {
        'include': '#atvar'
      }
      {
        'include': '#pipevar'
      }
      {
        'include': '#remotevar'
      }
      {
        'include': '#blockvar'
      }
      {
        'include': '#localvar'
      }
    ]
'scopeName': 'text.daml'